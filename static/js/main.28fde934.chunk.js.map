{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Errobound.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Error","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","style","overflow","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.28fde934.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email,id}) =>{\n\treturn(\n\n\t\t\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name} </h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist= ({robots}) => { \n\t\n\treturn (\n\n\t\t<div>\n    \t\t{\n\t\t\t\trobots.map((user)=>{\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn ( \n\t\t\t\t \t\t\t<Card \n\t\t\t\t\t\t\tkey={user.id} \n\t\t\t\t\t\t\tid={user.id} \n\t\t\t\t\t\t\tname={user.name} \n\t\t\t\t\t\t\temail={user.email} />\n\t\t\t\t\t\t\t);\n\t\t\t\t\t})\n    \t\t}\n\t\t</div>\n\n\t\t);\n}\n\nexport default Cardlist;\n\n","import React from 'react';\n\nconst SearchBox=({searchChange}) => {\n\treturn (\n\n\t\t<div className='pa2 '>\n\n\t\t <input \n\t\t \tclassName='pa3 ba b--green bg-lightest-blue' \n\t\t \ttype='search' \n\t\t \tplaceholder='search robots'\n\t\t \tonChange=  {searchChange}/>\n\n\n\t\t</div>\n\t\t);\n\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\n\nclass Error extends Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError:true})\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1> fuckkkk </h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\nexport default Error","import React, {Component} from 'react';\nimport Cardlist from '../Components/Cardlist';\n//import {robots} from './Robots';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css';\nimport Error from '../Components/Errobound';\n\n//https://www.youtube.com/watch?v=TaN5At5RWH8\nclass App extends Component {\n\t\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state= {\n\t\t\trobots: [],\n\t\t\tsearchfield:'' \n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=>response.json())\n\t\t.then(users=>this.setState({robots:users}));\n\n\t}\n\n\n\n\tonSearchChange = (event) =>{\n\t\tthis.setState({searchfield:event.target.value})\t\n\n\t}\n\n\n\trender(){\n\t\tconst {robots,searchfield}=this.state;\n\t\tconst filteredRobots=robots.filter(robot=>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t})\n\t\treturn !robots.length ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\n\t\t\t<div className ='tc'>\n\t\t\t\t<h1 className='f1'> RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<div style={{overflow: 'scroll',height:'200px'}}>\n\t\t\t\t\t<Error>\n\t\t\t\t\t\t<Cardlist robots ={filteredRobots}/>\n\t\t\t\t\t</Error>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t);\n\t\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\n  \t<App/>,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}